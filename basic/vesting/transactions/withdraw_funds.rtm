# The withdrawal of funds from the vesting component requires that the beneficiary's vesting badge is passed to the 
# method as an actual `Proof` so that the data in the proof may be read and so that the vesting component can then 
# determine how much funds have vested so far. Therefore, we need to withdraw the beneficiary's badge from the account
# component and into a proof.
CALL_METHOD 
    ComponentAddress("02322ade870afd26c843a8f1e699d9e5d71a763bbfb8b4f95255a3") 
    "create_proof" 
    ResourceAddress("035a183032a1d5a35bee1d71c7657dd5da1ff6aa817ca74bebdeea");

# The `create_proof` method returns as Proof. As soon as a proof comes back to the transaction worktop, it gets sent
# directly to the auth zone. Therefore, in the following instruction we're creating a `Proof` out of the badge in the
# auth zone.
CREATE_PROOF_FROM_AUTH_ZONE 
    ResourceAddress("035a183032a1d5a35bee1d71c7657dd5da1ff6aa817ca74bebdeea") 
    Proof("beneficiary_badge");

# Now that the have obtained the beneficiary's badge in a proof, we may call the withdraw method on the vesting 
# component to get the funds which have vested so far.
CALL_METHOD 
    ComponentAddress("02ec7c405825ff53f7eee2592b9d7b44462ad9ac0935a31c8edad3") 
    "withdraw_funds" 
    Proof("beneficiary_badge");

# We've now completed the withdrawal of tokens from the vesting component. We may now deposit everything into the 
# beneficiary's account
CALL_METHOD_WITH_ALL_RESOURCES 
    ComponentAddress("02322ade870afd26c843a8f1e699d9e5d71a763bbfb8b4f95255a3") 
    "deposit_batch";